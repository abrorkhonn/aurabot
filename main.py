import os
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import Command
from aiogram.utils import executor
from db import init_db, change_aura, get_aura

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

init_db()

@dp.message_handler(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∏ —è —Ä–∞–±–æ—Ç–∞—é üéâ")

@dp.message_handler(lambda m: m.text.startswith("+–∞—É—Ä–∞") or m.text.startswith("-–∞—É—Ä–∞"))
async def aura_handler(message: types.Message):
    parts = message.text.split()
    if len(parts) < 2 or not message.entities:
        await message.reply("–£–∫–∞–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: +–∞—É—Ä–∞ @username –∏–ª–∏ -–∞—É—Ä–∞ @username")
        return

    target = message.entities[1]
    if target.type != "mention":
        await message.reply("–ù—É–∂–µ–Ω @username")
        return

    username = message.text[target.offset+1:target.offset+target.length]
    # –ò—â–µ–º ID –ø–æ username (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–ø–ª–∞—è –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–∞–Ω–µ–µ –¥–∞–Ω–Ω—ã—Ö)
    if not message.reply_to_message:
        await message.reply("–ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    user = message.reply_to_message.from_user
    delta = 1 if message.text.startswith("+–∞—É—Ä–∞") else -1
    change_aura(user.id, user.username or username, delta)
    current = get_aura(user.id)

    await message.reply(f"‚ú® –ê—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username or username}: {current}")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
